@page "/servers"

@rendermode InteractiveServer

@inject NavigationManager NavigationManager

<h3>Servers</h3>

<br />
<br />

<div class="container-fluid text-center">
    <div class="row w-50">
        @foreach (var city in cities)
        {
            <div class="col">
                @*We use the ternary operator to determine if the city is selected. If it is, we add a border to the card. *@
                <div class="card @(selectedCity.Equals(city, StringComparison.OrdinalIgnoreCase)?"border-primary":"")">
                    <div class="card-body">
                        <img class="card-img-top" src="@($"/images/{city}.png")" alt="Card image cap">
                      <button type="button" class="btn btn-primary" @onclick="@(() => {SelectCity(city); })">@city</button>
                    </div>
                </div>

            </div>
        }
    </div>
</div>

<br />



<div class="input-group mb-3">
    <input type="text" class="form-control" placeholder="Search Servers" 
    @bind-value="serverFilter"
    @bind-value:event="oninput" />
    <button class="btn btn-outline-secondary" type="button" id="button-search" @onclick="HandleSearch">Search</button>
</div>

<br />

<ServerListComponent @rendermode="InteractiveServer"></ServerListComponent>
<p>
    <a href="/servers/add" class="btn btn-primary">Add Server</a>
</p>



@code {


  

    private List<String> cities = CitiesRepository.GetCities();

    private string selectedCity = "Toronto";

    
    private string _serverFilter = "";



    private string serverFilter { get=>_serverFilter; 
        set
        { 
            _serverFilter = value;
         // this.servers = ServersRepository.SearchServers(_serverFilter);


        }
    } 

   


    private void SelectCity(string cityName)
    {
        this.selectedCity = cityName;

        // this.servers = ServersRepository.GetServersByCity(this.selectedCity);
               
    }


 

    private void HandleSearch()
    {
        // this.servers = ServersRepository.SearchServers(serverFilter);

        this.selectedCity = string.Empty;
    }

}
