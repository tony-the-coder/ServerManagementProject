@inject NavigationManager NavigationManager



    @if (this.servers != null && this.servers.Count > 0)
    {
    <ul>


        @* Virtualization will only render the items that are visible on the screen and not render all the items until the 
        user scrolls down.
*@
    <Virtualize Items="this.servers" Context="server">
        <li @key="server.Id">
            @server.Name in @server.City is
            <span style="color: @((@server.IsOnline ? "green": "red"))">
                @(server.IsOnline ? "online" : "offline")
            </span>
            &nbsp;
            <a href="/servers/@server.Id" class="btn btn-link">Edit</a>
            &nbsp;
            <EditForm Model="server"
            FormName="@($"form-server-{server.Id}")"
            OnValidSubmit="@(()=> { DeleteServer(server.Id); })">
                <button type="submit" class="btn btn-primary">Delete</button>

            </EditForm>
        </li>

    </Virtualize>
</ul>
}
@code {

    //This is a parameter that is passed from the parent component.

    [Parameter]
    public string? CityName{ get; set; }

    private List<Server>? servers;

    //This method is called when the component is initialized and when the parameters are set.
    protected override void OnParametersSet()
    {
        servers = ServersRepository.GetServersByCity(CityName??"Toronto");
    }


    private void DeleteServer(int id)
    {
        if (id > 0)
        {
            ServersRepository.DeleteServer(id);
            //true is forcing the page to reload because the navigation manager is refreshing the page
            // for testing right now. 
            NavigationManager.NavigateTo("/servers", true);
        }
    }


}
